#!/usr/bin/env node

/**
 * Automated Release Creator
 * Creates GitHub releases for Container GUI with integration support
 */

const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

class ReleaseCreator {
  constructor() {
    this.projectRoot = path.join(__dirname, '..');
    this.logFile = path.join(this.projectRoot, 'logs', 'release.log');
  }

  async log(message) {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] ${message}\n`;
    console.log(message);
    
    try {
      await fs.mkdir(path.dirname(this.logFile), { recursive: true });
      await fs.appendFile(this.logFile, logEntry);
    } catch (error) {
      console.error('Failed to write to log file:', error);
    }
  }

  async getCurrentVersion() {
    const packagePath = path.join(this.projectRoot, 'package.json');
    const packageData = JSON.parse(await fs.readFile(packagePath, 'utf-8'));
    return packageData.version;
  }

  async getLatestContainerVersion() {
    try {
      // Fetch the latest Apple Container version from our release state
      const stateFile = path.join(this.projectRoot, '.release-state.json');
      const state = JSON.parse(await fs.readFile(stateFile, 'utf-8'));
      return state.lastProcessedTag || '0.1.0';
    } catch (error) {
      await this.log('‚ö†Ô∏è Could not determine latest container version, using default');
      return '0.1.0';
    }
  }

  async generateReleaseNotes() {
    const version = await this.getCurrentVersion();
    const containerVersion = await this.getLatestContainerVersion();
    
    // Read auto-generated release notes if they exist
    const releaseNotesPath = path.join(this.projectRoot, 'RELEASE_NOTES.md');
    let autoGeneratedNotes = '';
    
    try {
      autoGeneratedNotes = await fs.readFile(releaseNotesPath, 'utf-8');
    } catch (error) {
      await this.log('‚ÑπÔ∏è No auto-generated release notes found');
    }
    
    // Read recent changes from git log
    let gitChanges = '';
    try {
      gitChanges = execSync('git log --oneline --max-count=10', {
        cwd: this.projectRoot,
        encoding: 'utf-8'
      });
    } catch (error) {
      await this.log('‚ö†Ô∏è Could not read git log');
    }
    
    const releaseNotes = `# Container GUI v${version}

## üéâ Apple Container CLI Integration

This release includes enhanced support for Apple Container CLI ${containerVersion}.

### üîó Apple Container Repository
- **Repository**: [apple/container](https://github.com/apple/container)
- **Version Supported**: ${containerVersion}
- **Stars**: 15.2k ‚≠ê
- **Status**: Active development

### ‚ú® What's New

- ‚úÖ **Updated compatibility** with Apple Container CLI ${containerVersion}
- üîÑ **Automatic feature detection** and integration
- üé® **Enhanced UI** for new container commands
- üö© **New flags support** for advanced container operations
- üìä **Improved error handling** and user feedback
- üîß **Backend optimizations** for better CLI integration

### üñ•Ô∏è System Requirements

- **macOS 15+** (macOS 26 beta recommended for best compatibility)
- **Apple Silicon Mac** (M1, M2, M3, M4 series)
- **Apple Container CLI** [${containerVersion}](https://github.com/apple/container/releases)
- **Node.js 18+** (for development)

### üì¶ Installation

1. **Install Apple Container CLI**:
   \`\`\`bash
   # Download from GitHub releases
   # https://github.com/apple/container/releases/tag/${containerVersion}
   
   # Install and start the system
   container system start
   \`\`\`

2. **Install Container GUI**:
   - Download the DMG from the release assets
   - Double-click to mount and drag to Applications
   - Launch from Applications folder

### üîß Integration Features

#### Automated Apple Container Monitoring
- üîç **Release Monitoring**: Automatically tracks [apple/container releases](https://github.com/apple/container)
- üìù **Feature Analysis**: Intelligent parsing of release notes for new commands and flags
- üîÑ **Auto-Integration**: Seamless integration of new CLI features into the GUI
- üß™ **Testing Pipeline**: Comprehensive testing of new integrations
- üì¶ **Release Automation**: Automated release creation with proper versioning

#### Smart CLI Integration
- üéØ **Command Mapping**: Dynamic mapping of new container commands to UI components
- üö© **Flag Detection**: Automatic discovery and integration of new command flags
- ‚ö†Ô∏è **Breaking Change Handling**: Intelligent detection and handling of breaking changes
- üîÑ **Backward Compatibility**: Maintained compatibility with previous container versions

### üåü Key Features

#### Container Management
- üöÄ **Run Containers** with comprehensive resource control
- üèóÔ∏è **Build Images** with multi-architecture support
- üìä **Real-time Logs** with advanced filtering
- üñ•Ô∏è **System Control** and monitoring

#### Apple Container Networking
- üåê **Dedicated IP Addresses**: Each container gets its own IP
- üîó **Direct Access**: No port mapping required
- üè∑Ô∏è **DNS Support**: Access containers via hostname.domain
- üîí **Network Isolation**: Secure container communication

#### Developer Experience
- üé® **Modern UI**: Clean, intuitive interface designed for macOS
- ‚ö° **Fast Performance**: Native Tauri/Rust backend
- üîÑ **Live Updates**: Real-time container and system status
- üìö **Comprehensive Documentation**: In-app help and guides

${autoGeneratedNotes ? `

### ü§ñ Auto-Generated Integration Notes

${autoGeneratedNotes}

` : ''}

### üìù Recent Changes

\`\`\`
${gitChanges}
\`\`\`

### üöÄ Getting Started

1. **Install Apple Container CLI** from the [official releases](https://github.com/apple/container/releases)
2. **Start the container system**: \`container system start\`
3. **Launch Container GUI** from Applications
4. **Explore the features** through the intuitive interface

### üêõ Known Issues

- Some features require macOS 26 beta for optimal performance
- Network limitations may affect container connectivity on macOS 15

### üíù Contributing

We welcome contributions! Check out our [GitHub repository](https://github.com/your-repo/container-gui) for:
- üêõ Bug reports and feature requests
- üîß Code contributions and improvements
- üìö Documentation enhancements
- üß™ Testing and feedback

### üìö Documentation

- **Apple Container Docs**: [apple.github.io/container/documentation](https://apple.github.io/container/documentation/)
- **Container GUI Docs**: Included in the application
- **Troubleshooting Guide**: See TROUBLESHOOTING.md

---

**Full Changelog**: [View on GitHub](https://github.com/your-repo/container-gui/compare/v${this.getPreviousVersion(version)}...v${version})

*This release automatically integrates with Apple Container CLI ${containerVersion} and includes enhanced monitoring and automation capabilities.*`;

    return releaseNotes;
  }

  getPreviousVersion(currentVersion) {
    const parts = currentVersion.split('.').map(Number);
    if (parts[2] > 0) {
      parts[2]--;
    } else if (parts[1] > 0) {
      parts[1]--;
      parts[2] = 9;
    } else if (parts[0] > 0) {
      parts[0]--;
      parts[1] = 9;
      parts[2] = 9;
    }
    return parts.join('.');
  }

  async buildRelease() {
    await this.log('üî® Building release...');
    
    try {
      // Clean and build
      execSync('npm run build', {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      
      // Build Tauri release
      execSync('npm run tauri build', {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      
      await this.log('‚úÖ Release build completed');
    } catch (error) {
      throw new Error(`Build failed: ${error.message}`);
    }
  }

  async createGitTag() {
    const version = await this.getCurrentVersion();
    const tagName = `v${version}`;
    
    try {
      // Check if tag already exists
      try {
        execSync(`git rev-parse ${tagName}`, {
          cwd: this.projectRoot,
          stdio: 'pipe'
        });
        await this.log(`‚ö†Ô∏è Tag ${tagName} already exists, skipping tag creation`);
        return tagName;
      } catch {
        // Tag doesn't exist, create it
      }
      
      // Create and push tag
      execSync(`git tag -a ${tagName} -m "Release ${tagName}"`, {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      
      execSync(`git push origin ${tagName}`, {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      
      await this.log(`‚úÖ Created and pushed tag: ${tagName}`);
      return tagName;
    } catch (error) {
      throw new Error(`Failed to create git tag: ${error.message}`);
    }
  }

  async createGitHubRelease() {
    const version = await this.getCurrentVersion();
    const tagName = `v${version}`;
    const releaseNotes = await this.generateReleaseNotes();
    
    // Save release notes to file
    const releaseNotesFile = path.join(this.projectRoot, 'release', 'release-notes.md');
    await fs.mkdir(path.dirname(releaseNotesFile), { recursive: true });
    await fs.writeFile(releaseNotesFile, releaseNotes);
    
    await this.log(`üìù Release notes saved to: ${releaseNotesFile}`);
    await this.log(`üöÄ Ready to create GitHub release: ${tagName}`);
    
    // Instructions for manual GitHub release creation
    await this.log('');
    await this.log('üìã Next Steps:');
    await this.log('1. Go to https://github.com/your-repo/container-gui/releases/new');
    await this.log(`2. Choose tag: ${tagName}`);
    await this.log(`3. Release title: Container GUI ${version}`);
    await this.log(`4. Copy release notes from: ${releaseNotesFile}`);
    await this.log('5. Upload release assets from: release/ directory');
    await this.log('6. Check "Set as the latest release"');
    await this.log('7. Click "Publish release"');
    
    // If GitHub CLI is available, create release automatically
    try {
      execSync('gh --version', { stdio: 'pipe' });
      
      await this.log('');
      await this.log('ü§ñ GitHub CLI detected, creating release automatically...');
      
      const releaseCmd = `gh release create ${tagName} --title "Container GUI ${version}" --notes-file "${releaseNotesFile}" --latest`;
      
      execSync(releaseCmd, {
        cwd: this.projectRoot,
        stdio: 'inherit'
      });
      
      // Upload release assets
      const assetsDir = path.join(this.projectRoot, 'release');
      try {
        const assets = await fs.readdir(assetsDir);
        const assetFiles = assets
          .filter(file => file.endsWith('.dmg') || file.endsWith('.zip') || file.endsWith('.sha256'))
          .map(file => path.join(assetsDir, file));
        
        if (assetFiles.length > 0) {
          const uploadCmd = `gh release upload ${tagName} ${assetFiles.join(' ')}`;
          execSync(uploadCmd, {
            cwd: this.projectRoot,
            stdio: 'inherit'
          });
          
          await this.log('‚úÖ Release assets uploaded');
        }
      } catch (error) {
        await this.log(`‚ö†Ô∏è Could not upload assets: ${error.message}`);
      }
      
      await this.log(`üéâ GitHub release created: https://github.com/your-repo/container-gui/releases/tag/${tagName}`);
      
    } catch (error) {
      await this.log('‚ÑπÔ∏è GitHub CLI not available, manual release creation required');
    }
    
    return tagName;
  }

  async updateDocumentation() {
    await this.log('üìö Updating documentation...');
    
    const version = await this.getCurrentVersion();
    const containerVersion = await this.getLatestContainerVersion();
    
    // Update README.md with new version info
    const readmePath = path.join(this.projectRoot, 'README.md');
    
    try {
      let readme = await fs.readFile(readmePath, 'utf-8');
      
      // Update version references
      readme = readme.replace(
        /Container GUI v[\d.]+/g,
        `Container GUI v${version}`
      );
      
      // Update Apple Container CLI version references
      readme = readme.replace(
        /Apple Container CLI v[\d.]+/g,
        `Apple Container CLI ${containerVersion}`
      );
      
      await fs.writeFile(readmePath, readme);
      await this.log('‚úÖ README.md updated');
      
    } catch (error) {
      await this.log(`‚ö†Ô∏è Failed to update README.md: ${error.message}`);
    }
  }

  async createRelease(options = {}) {
    await this.log('üöÄ Starting automated release creation...');
    
    try {
      const version = await this.getCurrentVersion();
      await this.log(`üì¶ Creating release for version: ${version}`);
      
      // Build the release
      if (!options.skipBuild) {
        await this.buildRelease();
      }
      
      // Create git tag
      if (!options.skipTag) {
        await this.createGitTag();
      }
      
      // Update documentation
      await this.updateDocumentation();
      
      // Create GitHub release
      const tagName = await this.createGitHubRelease();
      
      await this.log('');
      await this.log('üéâ Release creation completed!');
      await this.log(`üì¶ Version: ${version}`);
      await this.log(`üè∑Ô∏è Tag: ${tagName}`);
      await this.log(`üîó GitHub: https://github.com/your-repo/container-gui/releases/tag/${tagName}`);
      
      return {
        version,
        tagName,
        success: true
      };
      
    } catch (error) {
      await this.log(`üí• Release creation failed: ${error.message}`);
      throw error;
    }
  }
}

// CLI execution
if (require.main === module) {
  const options = {
    skipBuild: process.argv.includes('--skip-build'),
    skipTag: process.argv.includes('--skip-tag')
  };
  
  const creator = new ReleaseCreator();
  
  creator.createRelease(options).catch((error) => {
    console.error('Release creation failed:', error);
    process.exit(1);
  });
}

module.exports = ReleaseCreator;